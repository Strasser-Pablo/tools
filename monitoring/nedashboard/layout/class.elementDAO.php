<?php

include_once dirname(__FILE__).'/../dataSources/performance/class.abstractDAO.php';
include_once dirname(__FILE__).'/../dataSources/performance/class.sourceDAO.php';

class elementDAO extends abstractDAO {
    var $xmlDom;
    var $boardName;
    var $counter;
    function getConfigFile() {
        $rc = new ReflectionClass(get_class($this));
        return dirname($rc->getFileName())."/configLayout.xml";
    }
    function elementDAO($boardName) {
        $this->boardName=$boardName;
        $this->loadFile($boardName);

        $this->counter=array();
    }

    function removeAll() {
        $board=$this->xmlDom->getElementById($this->boardName);

        $i=$board->childNodes->length;
        while (--$i>=0) {
            $this->log("remove: ".$board->firstChild->attributes->getNamedItem("id")->nodeValue);
            $board->removeChild($board->firstChild);
        }

    }

    function validate($childName) {
        if ($childName=="noTacho") {
            return true;
        } else {
            $childName=$this->boardName.".".$childName;
            $name=substr($childName, 0, strrpos($childName, "."));
            $this->log("service ".$name);

            $dataDAO=new sourceDAO($name);
            $this->log("source ");
            $sourceName=$dataDAO->getName($childName);
            $this->log("source ".$sourceName);

            return $dataDAO->contains($sourceName);
        }
    }

    function getName($id) {
        $e=$this->xmlDom->getElementById($id);
        if (stripos($e->attributes->getNamedItem("type")->nodeValue,"Tacho")===false) {
            return "noTacho";
        } else return $e->attributes->getNamedItem("name")->nodeValue;
    }

    function increaseCounter($type) {
        $c=0;
        if (isset($this->counter[$type])) {
            $c=$this->counter[$type]+1;
        }
        $this->counter[$type]=$c;

        return $c;
    }

    function addElement($elementName, $elementType="Tacho", $autogeneratedId=false) {
        $id = $this->boardName.".".$elementType;
        if ($autogeneratedId) {
            $id.=".".$this->increaseCounter($elementType);
        } else {
            $id.=".".$elementName;
        }

        $element=$this->xmlDom->createElement("element");
        $this->log("try to add ".$elementName." with type ".$elementType." and id ".$id);
        $element->setAttribute("xml:id",parent::bringInForm($id));
        $element->setAttribute("type",$elementType);
        $element->setAttribute("name",$elementName);
        $this->xmlDom->getElementById($this->boardName)->appendChild($element);
        return $element;
    }

    function removeServiceElement($serviceName) {
        $board=$this->xmlDom->getElementById(parent::bringInForm($this->boardName));

        $i=0;
        while ($i<$board->childNodes->length) {
            $element=$board->childNodes->item($i);
            $checkService=stripos(parent::bringOutForm($element->attributes->getNamedItem("id")->nodeValue),$serviceName);

            if (($element!=null) && ($checkService!==false)) {
                $board->removeChild($element);
            } else {
                $i++;
            }
        }
    }

    function removeHostElement($hostName) {
        $board=$this->xmlDom->getElementById(parent::bringInForm($this->boardName));

        $i=0;
        while ($i<$board->childNodes->length) {
            $element=$board->childNodes->item($i);
            $checkHost=stripos(parent::bringOutForm($element->attributes->getNamedItem("id")->nodeValue),$hostName);

            if (($element!=null) && ($checkHost!==false)) {
                $board->removeChild($element);
            } else {
                $i++;
            }
        }
    }

    function removeElement($elementName, $elementType="Tacho") {
        $id = parent::bringInForm($this->boardName.".".$elementType.".".$elementName);

        $board=$this->xmlDom->getElementById($this->boardName);
        $element = $this->xmlDom->getElementById($id);
        if ($element!=null) {
            $this->log("remove ".$element);
            $board->removeChild($element);
        }
    }

    function getElements() {
        $elements=array();

        $board = $this->xmlDom->getElementById($this->boardName);
        if ($board) {
            foreach ($board->childNodes as $element) {
                $e=array();
                $e["id"]=parent::bringOutForm($element->attributes->getNamedItem("id")->nodeValue);
                $e["type"]=$element->attributes->getNamedItem("type")->nodeValue;
                $e["name"]=$element->attributes->getNamedItem("name")->nodeValue;

                $elements[]=$e;
            }
        }
        return $elements;
    }

    function contains($elementId) {
        return in_array($elementId, $this->getElements());
    }

    function isEmpty() {
        return count($this->getElements())==0;
    }


}
?>
